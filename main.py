import telebot
import config
import json
import time
import mysql.connector

from DB import DB as D
from threading import Thread
from telebot import types

bot = telebot.TeleBot(config.TOKEN)
DB = D(config.mysql)

bot.send_message(1294113685, "Start Bot")

def json_loads(data):
    try:
        return json.loads(data)
    except:
        return None

def get_user(message):
    data = DB.select('Users', ['id', 'name', 'surname', 'num_class', 'let_class', 'id_team', 'status'], [['id', '=', message.chat.id]], 1)
    if (data):
        return {"id": data[0][0], "name": data[0][1], "surname": data[0][2], "num_class": data[0][3], "let_class": data[0][4], "id_team":data[0][5], "status": data[0][6],}
    else:
        DB.insert('Users', ['id', 'name', 'surname', 'num_class', 'let_class', 'id_team', 'status'], [[message.chat.id, message.chat.first_name, "NaN", 5, '–ê', -1, 'reg_menu']])
        return {"id": message.chat.id, "name": message.chat.first_name, "num_class": 5, "let_class": '–ê', "id_team": -1, "status": 'reg_menu'}

def log(message, user):
    query = "INSERT INTO log (text) VALUES (%s)"

def user_update(user, status=None):
    DB.update('Users', {'status': status}, [['id', '=', user['id']]])

def markups(buttons):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    b = []
    for i in buttons:
        b.append(types.KeyboardButton(i))
    markup.add(*b)
    return markup

def menu_markups():
    answer = markups(["–ó–∞–¥–∞—á–∏üñ•Ô∏è", "–ò–Ω—Ñ–æ‚Ñπ", "–¢–æ–øüîù","–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è"])
    return answer

@bot.message_handler(commands=['start'])
def start_message(message):
    user = get_user(message)
    if(user["status"] != "reg_menu"):
        bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –≤ CTF(Capture the flag)", reply_markup=menu_markups())
        log(message, user)
        user_update(user, "menu")
    else:
        bot.send_message(user["id"], "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:\n <b>1. –ï—Å–ª–∏ –≤—ã —É—á–∏—Ç–µ–ª—å</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–£—á–∏—Ç–µ–ª—å'. \n <b>2. –ï—Å–ª–∏ –≤—ã –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞, –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞, –≤ –º–µ–Ω—é ID –∫–æ–º–∞–Ω–¥—ã –≤–≤–µ–¥–∏—Ç–µ 0, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã, –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'. \n <b>3. –ï—Å–ª–∏ –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã(–Ω–µ –∫–∞–ø–∏—Ç–∞–Ω)</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞, –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞, –≤ –º–µ–Ω—é ID –∫–æ–º–∞–Ω–¥—ã –≤–≤–µ–¥–∏—Ç–µ, ID –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–≤–µ–ª–æ –∫–∞–ø–∏—Ç–∞–Ω—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã, –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'", parse_mode="HTML", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ']))

@bot.message_handler(commands=['restart'])
def start_message(message):
    user = get_user(message)
    bot.send_message(message.chat.id,"–ü–µ—Ä–µ–∑–∞—Ä—è–∂–∞—é!!!!!!!!!!", reply_markup=menu_markups())
    log(message, user)
    user_update(user, "menu")

class MessageHandler:
    class Main:
        def to_menu(bot, message, user):
            bot.send_message(user["id"], "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!", reply_markup=menu_markups())
            user_update(user, status="menu")
            return True

        def menu(bot, message, user):
            if ("–ò–ù–§–û" in message.text.upper()):
                bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ CTF. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–¥–∞—á–∞—Ö CTF", reply_markup=menu_markups())
                return True
            if ("–ó–∞–¥–∞—á–∏" in message.text.upper()):
                tasks = DB.select('Tasks')
                bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–µ—à–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:\n", reply_markup = markups(['–ù–∞–∑–∞–¥']))
                for i in range(len(tasks)):
                    if(user['id_team'] not in json.loads(tasks[i][4])):
                        pass 

                
            return True
        
        def tasks(bot, message, user):

            return True
    
    class Settings:

        pass

    class Reg:
        def reg_to_menu(bot, message, user):
            user_update(user, status="reg_menu")
            return True

        def reg_menu(bot, message, user):
            if(message.text.upper() == "–ò–ú–Ø"):
                user_update(user, status="reg_name")
                bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è", reply_markup=markups(['–ù–∞–∑–∞–¥']))
                return MessageHandler.Reg.reg_name(bot, message, user)
            if(message.text.upper() == "–§–ê–ú–ò–õ–ò–Ø"):
                bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é", reply_markup=markups(['–ù–∞–∑–∞–¥']))
                user_update(user, status="reg_surname")
                return MessageHandler.Reg.reg_surname(bot, message, user)
            if(message.text.upper() == "–ù–û–ú–ï–† –ö–õ–ê–°–°–ê"):
                bot.send_message(user["id"], "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞", reply_markup=markups(['7', '8', '9', '–ù–∞–∑–∞–¥']))
                user_update(user, status="reg_num_class")
                return MessageHandler.Reg.reg_num_class(bot, message, user)
            if(message.text.upper() == "–ë–£–ö–í–ê –ö–õ–ê–°–°–ê"):
                bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞, —Ä—É—Å—Å–∫–æ–π –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤–æ–π", reply_markup=markups(['–ù–∞–∑–∞–¥']))
                user_update(user, status="reg_let_class")
                return MessageHandler.Reg.reg_let_class(bot, message, user)
            if(message.text.upper() == "ID –ö–û–ú–ê–ù–î–´"):
                bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ 0", reply_markup=markups(['–ù–∞–∑–∞–¥']))
                user_update(user, status="reg_id_team")
            if(message.text.upper() == "–£–ß–ò–¢–ï–õ–¨"):
                data = DB.select('Users', ['surname'], [['id', '=', user['id']]])
                if(data[0][0] == 'NaN'):
                    bot.send_message(user['id'], '–í—ã –Ω–µ –≤–≤–µ–ª–∏–∏ —Ñ–∞–º–∏–ª–∏—é')
                else:
                    DB.update(user, {'id_team': 0}, [['id', '=', user['id']]])
                    bot.send_message(user['id'], "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞", reply_markup=menu_markups())
                    return MessageHandler.Main.to_menu(bot, message, user)
            if(message.text.upper() == "–ì–û–¢–û–í–û"):
                data = DB.select('Users', ['surname', 'id_team'], [['id', '=', user['id']]])
                if(data[0][0] == 'NaN' or data[0][1] == -1):
                    bot.send_message(user['id'], "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
                else:
                    bot.send_message(user['id'], "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞", reply_markup=menu_markups())
                    return MessageHandler.Main.to_menu(bot, message, user)

            return True

        def reg_name(bot, message, user):
            
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)
            elif(message.text.upper() != "–ò–ú–Ø" and message.text.upper() != "–ù–ê–ó–ê–î"):
                DB.update('Users', {'name': message.text}, [['id', '=', user['id']]])
                bot.send_message(user['id'], "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)    
            return True
        
        def reg_surname(bot, message, user):
            
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)
            elif(message.text.upper() != "–§–ê–ú–ò–õ–ò–Ø" and message.text.upper() != "–ù–ê–ó–ê–î"):
                DB.update('Users', {'surname': message.text}, [['id', '=', user['id']]])
                bot.send_message(user['id'], "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)
            return True
        
        def reg_num_class(bot, message, user):
            
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)
            elif(message.text.upper() != "–ù–û–ú–ï–† –ö–õ–ê–°–°–ê" and message.text.upper() != "–ù–ê–ó–ê–î"):
                if('7' in message.text or '8' in message.text or '9' in message.text):
                    DB.update('Users', {'num_class': int(message.text)}, [['id', '=', user['id']]])
                    bot.send_message(user['id'], "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ']))
                    return MessageHandler.Reg.reg_to_menu(bot, message, user)
            return True
        
        def reg_let_class(bot, message, user):
            
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)
            
            elif(message.text.upper() != "–ë–£–ö–í–ê –ö–õ–ê–°–°–ê" and message.text.upper() != "–ù–ê–ó–ê–î"):
                DB.update('Users', {'let_class': message.text}, [['id', '=', user['id']]])
                bot.send_message(user['id'], "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)
            
            return True
        
        def reg_team_id(bot, message, user):

            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)
            elif(message.text.upper() == "0"):
                user_update(user, status="reg_team")
                bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", reply_markup=markups(['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ù–∞–∑–∞–¥']))
                return MessageHandler.Reg.Team.reg_team_to_menu(bot, message, user)
            elif(message.text.upper() != "–ë–£–ö–í–ê –ö–õ–ê–°–°–ê" and message.text.upper() != "–ù–ê–ó–ê–î"):
                data = DB.select('Teams', where= [['id', '=', int(message.text)]], limit=1)
                if(len(data) == 1):
                    data = data[0]
                    DB.update('Users', {'id_team': int(message.text)}, [['id', '=', user['id']]])
                    people = json.loads(data[2])
                    people.append(user['id'])
                    DB.update('Teams', {'people': json.dumps(people)}, [['id', '=', user['id_team']]])
                    bot.send_message(user["id"], "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ']))
                    return MessageHandler.Reg.reg_to_menu(bot, message, user)
                else:
                    bot.send_message(user["id"], "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True

        
        class Team:
            def reg_team_to_menu(bot, message, user):
                user_update(user, 'reg_team_menu')
                return True

            def reg_team_menu(bot, message, user):
                if("–ù–ê–ó–í–ê–ù–ò–ï" in message.text.upper()):
                    bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:", reply_markup=markups(['–ù–∞–∑–∞–¥']))
                    return MessageHandler.Reg.Team.reg_team_name(bot, message, user)
                if("–ù–ê–ó–ê–î" in message.text.upper()):
                    bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ']))
                    return MessageHandler.Reg.reg_to_menu(bot, message, user)
                return True
            
            def reg_team_name(bot, message, user):
                user_update(user, 'reg_team_name')
                if("–ù–ê–ó–í–ê–ù–ò–ï" not in message.text.upper() and "–ù–ê–ó–ê–î" not in message.text.upper()):
                    data = []
                    data.append(user['id'])
                    DB.insert('Teams', ['id', 'team_name', 'people', 'points'], [[message.chat.id, message.text,json.dumps(data, indent=2), 0]])
                    print('b1')
                    bot.send_message(user["id"], f"–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, ID –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã: <b>{user['id']}</b>", parse_mode="HTML", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ']))
                    return MessageHandler.Reg.reg_to_menu(bot, message, user)
                if("–ù–ê–ó–ê–î" in message.text.upper()):
                    bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é",reply_markup=markups(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ì–æ—Ç–æ–≤–æ"]))
                    return MessageHandler.Reg.Team.reg_team_to_menu(bot, message, user)
                return True
        


def update_connection():
    while True:
        try:
            del DB
            DB = DB(mysql)
            time.sleep(5)
        except:
            pass

thread1 = Thread(target=update_connection)
thread1.start()

@bot.message_handler(content_types=["text"])
def handle_text(message):
    print(f"{message.chat.id} {message.chat.first_name} |{message.text}|")
    message.text = message.text.strip().replace("  ", " ").replace("\t\t", "\t")
    user = get_user(message)
    log(message, user)
    action = {
        "menu": MessageHandler.Main.menu,
        "tasks": MessageHandler.Main.tasks, 
        # "set_menu": MessageHandler.Settings.set_menu,
        # "set_name": MessageHandler.Settings.set_name,
        # "set_surname": MessageHandler.Settings.set_surname,
        # "set_let_class": MessageHandler.Settings.set_let_class,
        # "set_num_class": MessageHandler.Settings.set_num_class,
        # "set_id_team": MessageHandler.Settings.set_team_id,
        "reg_menu": MessageHandler.Reg.reg_menu,
        "reg_name": MessageHandler.Reg.reg_name,
        "reg_surname": MessageHandler.Reg.reg_surname,
        "reg_let_class": MessageHandler.Reg.reg_let_class,
        "reg_num_class": MessageHandler.Reg.reg_num_class,
        "reg_id_team": MessageHandler.Reg.reg_team_id,
        "reg_team_menu": MessageHandler.Reg.Team.reg_team_menu,
        "reg_team_name": MessageHandler.Reg.Team.reg_team_name
    }
    if action.get(user["status"]):
        if not action[user["status"]](bot, message, user):
            bot.send_message(user["id"], "–ù–µ –ø–æ–Ω—è–ª!")
    else:
        bot.send_message(user["id"], f"–°—Ç–∞—Ç—É—Å {user['status']} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return

bot.polling()
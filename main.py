#–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
import telebot
import config
import json
import time
import mysql.connector

#–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –º–æ–¥—É–ª–µ–π
from threading import Thread
from telebot import types

#–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞ DB.py
from DB import DB as D
 
#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç—É
bot = telebot.TeleBot(config.TOKEN)
#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB = D(config.mysql)

ID = #–í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º id

#–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
bot.send_message(ID, "Start Bot")

#–ó–∞–≥—Ä—É–∑–∫–∞ json –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
def json_loads(data):
    try:
        return json.loads(data)
    except:
        return None

#–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –æ–Ω –∏–º–µ–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user(message):
    data = DB.select('Users', ['id', 'name', 'surname', 'num_class', 'let_class', 'id_team', 'status'], [['id', '=', message.chat.id]], 1)
    if (data):
        return {"id": data[0][0], "name": data[0][1], "surname": data[0][2], "num_class": data[0][3], "let_class": data[0][4], "id_team":data[0][5], "status": data[0][6],}
    else:
        DB.insert('Users', ['id', 'name', 'surname', 'num_class', 'let_class', 'id_team', 'status'], [[message.chat.id, message.chat.first_name, "NaN", 5, '–ê', -1, 'reg_menu']])
        return {"id": message.chat.id, "name": message.chat.first_name, "num_class": 5, "let_class": '–ê', "id_team": -1, "status": 'reg_menu'}

#–í–µ–¥–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –æ —Ç–æ–º, —á—Ç–æ –≤–≤–æ–¥–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
def log(message, user):
    query = "INSERT INTO log (text) VALUES (%s)"

#–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –ø–æ–º–µ–Ω—è—Ç—å
def user_update(user, status=None):
    DB.update('Users', {'status': status}, [['id', '=', user['id']]])

#–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫, –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –º–∞—Å—Å–∏–≤ –∏–∑ –∫–Ω–æ–ø–æ–∫
def markups(buttons):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    b = []
    for i in buttons:
        b.append(types.KeyboardButton(i))
    markup.add(*b)
    return markup

#–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–µ–Ω—é, –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def menu_markups(user):
    answer = markups(["–ó–∞–¥–∞—á–∏üñ•Ô∏è", "–ò–Ω—Ñ–æ‚Ñπ", "–¢–æ–øüîù","–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è"])
    return answer

#–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥—ë—Ç –∫–æ–º–∞–Ω–¥—É 'start', —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–∏—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å –¥–æ 'menu'
@bot.message_handler(commands=['start'])
def start_message(message):
    user = get_user(message)
    if(user["status"] != "reg_menu"):
        bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –≤ CTF(Capture the flag)", reply_markup=menu_markups(user))
        log(message, user)
        user_update(user, "menu")
    else:
        bot.send_message(user["id"], "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:\n <b>1. –ï—Å–ª–∏ –≤—ã —É—á–∏—Ç–µ–ª—å</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–£—á–∏—Ç–µ–ª—å'. \n <b>2. –ï—Å–ª–∏ –≤—ã –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞, –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞, –≤ –º–µ–Ω—é ID –∫–æ–º–∞–Ω–¥—ã –≤–≤–µ–¥–∏—Ç–µ 0, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã, –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'. \n <b>3. –ï—Å–ª–∏ –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã(–Ω–µ –∫–∞–ø–∏—Ç–∞–Ω)</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞, –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞, –≤ –º–µ–Ω—é ID –∫–æ–º–∞–Ω–¥—ã –≤–≤–µ–¥–∏—Ç–µ, ID –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–≤–µ–ª–æ –∫–∞–ø–∏—Ç–∞–Ω—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã, –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'", parse_mode="HTML", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ', '–£—á–∏—Ç–µ–ª—å']))

#–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–Ω–æ–ø–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
@bot.message_handler(commands=['restart'])
def start_message(message):
    user = get_user(message)
    bot.send_message(message.chat.id,"–ü–µ—Ä–µ–∑–∞—Ä—è–∂–∞—é!!!!!!!!!!", reply_markup=menu_markups(user))
    log(message, user)
    user_update(user, "menu")

#–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å
class MessageHandler:
    #–ö–ª–∞—Å—Å –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
    class Main:
        #–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–ª–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é
        def to_menu(bot, message, user):
            bot.send_message(user["id"], "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!", reply_markup=menu_markups(user))
            user_update(user, status="menu")
            return True

        #–í –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤ –º–µ–Ω—é
        def menu(bot, message, user):
            #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç "–ò–Ω—Ñ–æ", —Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –Ω–∞–ø–∏—à–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º
            if ("–ò–ù–§–û" in message.text.upper()):
                bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ CTF. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–¥–∞—á–∞—Ö CTF\n<b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏,</b> –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞—á–∏', –Ω–æ —É—á—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–¥–∞–Ω–∏—è –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω.\n<b>–ï—Å–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–ª–∏, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫</b> –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ\n<b>–ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–µ–¥–æ—á—ë—Ç,</b> –ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º –º–Ω–µ, @Gladfn", parse_mode="HTML", reply_markup=menu_markups(user))
                return True
            
            #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç "–ó–∞–¥–∞—á–∏", —Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –∑–∞–º–µ–Ω–∏—Ç –∫–Ω–æ–ø–∫—É –∏ –Ω–∞–ø–∏—à–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏ –ø–æ–∫–∞–∂–µ—Ç –∏—Ö
            elif ("–ó–ê–î–ê–ß–ò" in message.text.upper()):
                tasks = DB.select('Tasks')

                but = []

                answer = ''
                for i in range(len(tasks)):
                    data = json.loads(tasks[i][4])
                    print(data)
                    if(user['id_team'] not in json.loads(tasks[i][4])):
                        answer += "–ó–∞–¥–∞—á–∞ ‚Ññ" + str(i + 1) + ")"
                        answer += " " + tasks[i][1]
                        answer += "\n"
                        but.append(tasks[i][1])
                
                bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–µ—à–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:")
                bot.send_message(user['id'], answer)
                but.append('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ')
                but.append('–ù–∞–∑–∞–¥')
                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å:", reply_markup=markups(but))
                user_update(user, status="tasks")
                return MessageHandler.Main.tasks(bot, message, user)
            
            #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", —Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –¥—Ä—É–≥–∏–º –∫–ª–∞—Å—Å–æ–º
            elif ("–ù–ê–°–¢–†–û–ô–ö–ò" in message.text.upper()):
                bot.send_message(user['id'], "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Settings.set_to_menu(bot, message, user)
        
            #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", —Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ç–æ–ø –∫–æ–º–∞–Ω–¥ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
            elif ("–¢–û–ü" in message.text.upper()):
                teams = DB.select('Teams', ['team_name', 'points'])
                answer = ""
                teams.sort(key = lambda x: x[1], reverse=True)
                user_team = DB.select('Teams', ['team_name', 'points'], where=[['id', '=', user['id_team']]])
                h = teams.index(user_team[0])
                if(len(teams) > 10):
                    if (h <= 9):
                        for i in range(10):
                            if(h == i):
                                answer += f"<b>{i + 1}) {teams[i][0]} {teams[i][1]}</b>\n"
                            else:
                                answer += f"{i + 1}) {teams[i][0]} {teams[i][1]}\n"

                    else:
                        for i in range(10):
                            answer += f"{i + 1}) {teams[i][0]} {teams[i][1]}\n"
                        answer += f"<b>{h + 1} + {user_team[0][1]}</b>"
                else:
                    for i in range(len(teams)):
                        if(h == i):
                            answer += f"<b>{i + 1}) {teams[i][0]} {teams[i][1]}</b>\n"
                        else:
                            answer += f"{i + 1}) {teams[i][0]} {teams[i][1]}\n"
                bot.send_message(user['id'], f"<b>–¢–æ–ø 10</b>\n{answer}", parse_mode="HTML")

            else:
                return False
            
            return True
        
        #–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏
        def tasks(bot, message, user):
            
            #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç "–ù–∞–∑–∞–¥", —Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é
            if("–ù–ê–ó–ê–î" in message.text.upper()):
                return MessageHandler.Main.to_menu(bot, message, user)
            
            #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", —Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–æ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–ø–∏—Ç–∞–Ω–æ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ —Ç–∞–∫ —Ç–æ —Ä–∞–∑—Ä–µ—à–∏—Ç –µ–º—É —Å–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –∏–Ω–∞—á–µ –Ω–∞–ø–∏—à–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è—Ç—Å—è –∫–∞–ø–∏—Ç–∞–Ω–æ–º
            elif("–ó–ê–ì–†–£–ó–ò–¢–¨ –†–ï–®–ï–ù–ò–ï" in message.text.upper()):
                if(user['id'] == user['id_team']):
                    user_update(user, status='tasks_comp')
                    tasks = DB.select('Tasks')

                    but = []

                    for i in range(len(tasks)):
                        data = json.loads(tasks[i][4])
                        if(user['id_team'] not in json.loads(tasks[i][4])):
                            but.append(tasks[i][1])

                    but.append('–ù–∞–∑–∞–¥')
                    bot.send_message(user['id'], '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–∫—É—é –∑–∞–¥–∞—á—É —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å:', reply_markup=markups(but))
                    
                    return MessageHandler.Main.tasks_comp(bot, message, user)
                else:
                    bot.send_message(user["id"], "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∫–∞–ø–∏—Ç–∞–Ω–æ–º")

            #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–µ "–ó–∞–¥–∞—á–∏" –∏ –Ω–µ "–ù–∞–∑–∞–¥", —Ç–æ –≤—ã–≤–æ–¥–∏—Ç –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            elif("–ó–ê–î–ê–ß–ò" not in message.text.upper() and "–ù–ê–ó–ê–î" not in message.text.upper()):
                data = DB.select('Tasks', where=[['name', '=', message.text]], limit=1)
                data = data[0]
                if(data[-1] != None):
                    bot.send_message(user['id'], f"–ó–∞–¥–∞—á–∞: {data[1]}\n{data[-1]}\n–§–∞–π–ª—ã –∫ –∑–∞–¥–∞—á–µ:")
                else:
                    bot.send_message(user['id'], f"–ó–∞–¥–∞—á–∞: {data[1]}\n–§–∞–π–ª—ã –∫ –∑–∞–¥–∞—á–µ:")
                files = json.loads(data[2])
                for i in range(len(files)):
                    
                    doc = open(f'tasks/{int(data[0])}/{files[i]}', 'rb')
                    bot.send_document(user['id'], doc)
            
            return True
        
        #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        def tasks_comp(bot, message, user):
            
            #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç "–ù–∞–∑–∞–¥", —Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –≤–µ—Ä–Ω—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –∑–∞–¥–∞–Ω–∏—è
            if("–ù–ê–ó–ê–î" in message.text.upper()):
                user_update(user, status='tasks')
                return MessageHandler.Main.tasks(bot, message, user)
            
            elif("–ó–ê–ì–†–£–ó–ò–¢–¨ –†–ï–®–ï–ù–ò–ï" not in message.text.upper()):
                tasks = DB.select('Tasks', where=[['name', '=', message.text]])
                bot.send_message(user['id'], "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á, —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º(–±–µ–∑ –∫–∞–≤—ã—á–µ–∫): 'id –∑–∞–¥–∞–Ω–∏—è,–∫–ª—é—á':")
                user_update(user, status='tasks_comp_end')
                return MessageHandler.Main.tasks_comp_end(bot, message, user)
            
            return True
        
        def tasks_comp_end(bot, message, user):
            if("–ù–ê–ó–ê–î" in message.text.upper()):
                user_update(user, status='tasks')
                return MessageHandler.Main.tasks(bot, message, user)
            elif("–ó–ê–ì–†–£–ó–ò–¢–¨ –†–ï–®–ï–ù–ò–ï" not in message.text.upper()):
                if(',' in message.text):
                    for i in range(len(message.text)):
                        if(message.text[i] == ","):
                            data = DB.select('Tasks', [['id', '=', int(message.text[:i])]])
                            if(len(data) == 1 and message.text[i+1:]):
                                data = data[0]
                                people = len(json.loads(data[4])) + 1
                                points = DB.select('Teams', ['points'], [['id', '=', user["id_team"]]])
                                DB.update('Teams', {'points' : points + data[3]}, [['id', '=', user['id_team']]])
                                DB.update('Tasks', {'values' : ((((100 - 1000)/(people ** 2)) * (data[5] ** 2)) + 1000) // 1}, [['id', '=' ,data['id']]])
            return True
        
    class Settings:
        def set_to_menu(bot, message, user):
            user_update(user, status="set_menu")
            return True

        def set_menu(bot, message, user):
            if(message.text.upper() == "–ò–ú–Ø"):
                user_update(user, status="set_name")
                bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è", reply_markup=markups(['–ù–∞–∑–∞–¥']))
                return MessageHandler.Settings.set_name(bot, message, user)
            if(message.text.upper() == "–§–ê–ú–ò–õ–ò–Ø"):
                bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é", reply_markup=markups(['–ù–∞–∑–∞–¥']))
                user_update(user, status="set_surname")
                return MessageHandler.Settings.set_surname(bot, message, user)
            if(message.text.upper() == "–ù–û–ú–ï–† –ö–õ–ê–°–°–ê"):
                bot.send_message(user["id"], "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞", reply_markup=markups(['7', '8', '9', '–ù–∞–∑–∞–¥']))
                user_update(user, status="set_num_class")
                return MessageHandler.Settings.set_num_class(bot, message, user)
            if(message.text.upper() == "–ë–£–ö–í–ê –ö–õ–ê–°–°–ê"):
                bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞, —Ä—É—Å—Å–∫–æ–π –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤–æ–π", reply_markup=markups(['–ù–∞–∑–∞–¥']))
                user_update(user, status="set_let_class")
                return MessageHandler.Settings.set_let_class(bot, message, user)
            if(message.text.upper() == "–ì–û–¢–û–í–û"):
                bot.send_message(user['id'], "–£—Å–ø–µ—à–Ω–æ", reply_markup=menu_markups(user))
                return MessageHandler.Main.to_menu(bot, message, user)

            return True

        def set_name(bot, message, user):
            
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Settings.set_to_menu(bot, message, user)
            elif(message.text.upper() != "–ò–ú–Ø" and message.text.upper() != "–ù–ê–ó–ê–î"):
                DB.update('Users', {'name': message.text}, [['id', '=', user['id']]])
                bot.send_message(user['id'], "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Settings.set_to_menu(bot, message, user)    
            return True
        
        def set_surname(bot, message, user):
            
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Settings.set_to_menu(bot, message, user)    
            elif(message.text.upper() != "–§–ê–ú–ò–õ–ò–Ø" and message.text.upper() != "–ù–ê–ó–ê–î"):
                DB.update('Users', {'surname': message.text}, [['id', '=', user['id']]])
                bot.send_message(user['id'], "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Settings.set_to_menu(bot, message, user)    
            return True
        
        def set_num_class(bot, message, user):
            
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Settings.set_to_menu(bot, message, user)    
            elif(message.text.upper() != "–ù–û–ú–ï–† –ö–õ–ê–°–°–ê" and message.text.upper() != "–ù–ê–ó–ê–î"):
                if('7' in message.text or '8' in message.text or '9' in message.text):
                    DB.update('Users', {'num_class': int(message.text)}, [['id', '=', user['id']]])
                    bot.send_message(user['id'], "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', '–ì–æ—Ç–æ–≤–æ']))
                    return MessageHandler.Settings.set_to_menu(bot, message, user)    
            return True
        
        def set_let_class(bot, message, user):
            
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Settings.set_to_menu(bot, message, user)    
            
            elif(message.text.upper() != "–ë–£–ö–í–ê –ö–õ–ê–°–°–ê" and message.text.upper() != "–ù–ê–ó–ê–î"):
                DB.update('Users', {'let_class': message.text}, [['id', '=', user['id']]])
                bot.send_message(user['id'], "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', '–ì–æ—Ç–æ–≤–æ']))
                return MessageHandler.Settings.set_to_menu(bot, message, user)    
            
            return True
        pass

    class Reg:
        def reg_to_menu(bot, message, user):
            user_update(user, status="reg_menu")
            return True

        def reg_menu(bot, message, user):
            if(message.text.upper() == "–ò–ú–Ø"):
                user_update(user, status="reg_name")
                bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è", reply_markup=markups(['–ù–∞–∑–∞–¥']))
                return MessageHandler.Reg.reg_name(bot, message, user)
            if(message.text.upper() == "–§–ê–ú–ò–õ–ò–Ø"):
                bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é", reply_markup=markups(['–ù–∞–∑–∞–¥']))
                user_update(user, status="reg_surname")
                return MessageHandler.Reg.reg_surname(bot, message, user)
            if(message.text.upper() == "–ù–û–ú–ï–† –ö–õ–ê–°–°–ê"):
                bot.send_message(user["id"], "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞", reply_markup=markups(['7', '8', '9', '–ù–∞–∑–∞–¥']))
                user_update(user, status="reg_num_class")
                return MessageHandler.Reg.reg_num_class(bot, message, user)
            if(message.text.upper() == "–ë–£–ö–í–ê –ö–õ–ê–°–°–ê"):
                bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞, —Ä—É—Å—Å–∫–æ–π –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤–æ–π", reply_markup=markups(['–ù–∞–∑–∞–¥']))
                user_update(user, status="reg_let_class")
                return MessageHandler.Reg.reg_let_class(bot, message, user)
            if(message.text.upper() == "ID –ö–û–ú–ê–ù–î–´"):
                bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ 0", reply_markup=markups(['–ù–∞–∑–∞–¥']))
                user_update(user, status="reg_id_team")
            if(message.text.upper() == "–£–ß–ò–¢–ï–õ–¨"):
                data = DB.select('Users', ['surname'], [['id', '=', user['id']]])
                if(data[0][0] == 'NaN'):
                    bot.send_message(user['id'], '–í—ã –Ω–µ –≤–≤–µ–ª–∏–∏ —Ñ–∞–º–∏–ª–∏—é')
                else:
                    DB.update(user, {'id_team': 0}, [['id', '=', user['id']]])
                    bot.send_message(user['id'], "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞", reply_markup=menu_markups(user))
                    return MessageHandler.Main.to_menu(bot, message, user)
            if(message.text.upper() == "–ì–û–¢–û–í–û"):
                data = DB.select('Users', ['surname', 'id_team'], [['id', '=', user['id']]])
                if(data[0][0] == 'NaN' or data[0][1] == -1):
                    bot.send_message(user['id'], "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
                else:
                    bot.send_message(user['id'], "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞", reply_markup=menu_markups(user))
                    return MessageHandler.Main.to_menu(bot, message, user)

            return True

        def reg_name(bot, message, user):
            
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ', '–£—á–∏—Ç–µ–ª—å']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)
            elif(message.text.upper() != "–ò–ú–Ø" and message.text.upper() != "–ù–ê–ó–ê–î"):
                DB.update('Users', {'name': message.text}, [['id', '=', user['id']]])
                bot.send_message(user['id'], "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ', '–£—á–∏—Ç–µ–ª—å']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)    
            return True
        
        def reg_surname(bot, message, user):
            
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ', '–£—á–∏—Ç–µ–ª—å']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)
            elif(message.text.upper() != "–§–ê–ú–ò–õ–ò–Ø" and message.text.upper() != "–ù–ê–ó–ê–î"):
                DB.update('Users', {'surname': message.text}, [['id', '=', user['id']]])
                bot.send_message(user['id'], "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ', '–£—á–∏—Ç–µ–ª—å']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)
            return True
        
        def reg_num_class(bot, message, user):
            
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ', '–£—á–∏—Ç–µ–ª—å']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)
            elif(message.text.upper() != "–ù–û–ú–ï–† –ö–õ–ê–°–°–ê" and message.text.upper() != "–ù–ê–ó–ê–î"):
                if('7' in message.text or '8' in message.text or '9' in message.text):
                    DB.update('Users', {'num_class': int(message.text)}, [['id', '=', user['id']]])
                    bot.send_message(user['id'], "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ', '–£—á–∏—Ç–µ–ª—å']))
                    return MessageHandler.Reg.reg_to_menu(bot, message, user)
            return True
        
        def reg_let_class(bot, message, user):
            
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ', '–£—á–∏—Ç–µ–ª—å']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)
            
            elif(message.text.upper() != "–ë–£–ö–í–ê –ö–õ–ê–°–°–ê" and message.text.upper() != "–ù–ê–ó–ê–î"):
                DB.update('Users', {'let_class': message.text}, [['id', '=', user['id']]])
                bot.send_message(user['id'], "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ', '–£—á–∏—Ç–µ–ª—å']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)
            
            return True
        
        def reg_team_id(bot, message, user):

            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ', '–£—á–∏—Ç–µ–ª—å']))
                return MessageHandler.Reg.reg_to_menu(bot, message, user)
            elif(message.text.upper() == "0"):
                user_update(user, status="reg_team")
                bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", reply_markup=markups(['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ù–∞–∑–∞–¥']))
                return MessageHandler.Reg.Team.reg_team_to_menu(bot, message, user)
            elif(message.text.upper() != "–ë–£–ö–í–ê –ö–õ–ê–°–°–ê" and message.text.upper() != "–ù–ê–ó–ê–î"):
                data = DB.select('Teams', where= [['id', '=', int(message.text)]], limit=1)
                if(len(data) == 1):
                    data = data[0]
                    DB.update('Users', {'id_team': int(message.text)}, [['id', '=', user['id']]])
                    people = json.loads(data[2])
                    people.append(user['id'])
                    DB.update('Teams', {'people': json.dumps(people)}, [['id', '=', user['id_team']]])
                    bot.send_message(user["id"], "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ', '–£—á–∏—Ç–µ–ª—å']))
                    return MessageHandler.Reg.reg_to_menu(bot, message, user)
                else:
                    bot.send_message(user["id"], "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True

        
        class Team:
            def reg_team_to_menu(bot, message, user):
                user_update(user, 'reg_team_menu')
                return True

            def reg_team_menu(bot, message, user):
                if("–ù–ê–ó–í–ê–ù–ò–ï" in message.text.upper()):
                    bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=markups(['–ù–∞–∑–∞–¥']))
                    return MessageHandler.Reg.Team.reg_team_name(bot, message, user)
                if("–ù–ê–ó–ê–î" in message.text.upper()):
                    bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ', '–£—á–∏—Ç–µ–ª—å']))
                    return MessageHandler.Reg.reg_to_menu(bot, message, user)
                return True
            
            def reg_team_name(bot, message, user):
                user_update(user, 'reg_team_name')
                if("–ù–ê–ó–í–ê–ù–ò–ï" not in message.text.upper() and "–ù–ê–ó–ê–î" not in message.text.upper()):
                    data = []
                    data.append(user['id'])
                    DB.insert('Teams', ['id', 'team_name', 'people', 'points'], [[message.chat.id, message.text,json.dumps(data, indent=2), 0]])
                    print('b1')
                    bot.send_message(user["id"], f"–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, ID –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã: <b>{user['id']}</b>", parse_mode="HTML", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã', '–ì–æ—Ç–æ–≤–æ', '–£—á–∏—Ç–µ–ª—å']))
                    DB.update("Users", {'id_team' : user['id']}, [['id', '=', user['id']]])
                    return MessageHandler.Reg.reg_to_menu(bot, message, user)
                if("–ù–ê–ó–ê–î" in message.text.upper()):
                    bot.send_message(user["id"], "–í–æ–∑–≤—Ä–∞—â–∞—é",reply_markup=markups(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ì–æ—Ç–æ–≤–æ"]))
                    return MessageHandler.Reg.Team.reg_team_to_menu(bot, message, user)
                return True
        


def update_connection():
    while True:
        try:
            del DB
            DB = DB(mysql)
            time.sleep(5)
        except:
            pass

thread1 = Thread(target=update_connection)
thread1.start()

@bot.message_handler(content_types=["text"])
def handle_text(message):
    print(f"{message.chat.id} {message.chat.first_name} |{message.text}|")
    message.text = message.text.strip().replace("  ", " ").replace("\t\t", "\t")
    user = get_user(message)
    log(message, user)
    action = {
        "menu": MessageHandler.Main.menu,
        "tasks": MessageHandler.Main.tasks,
        "tasks_comp": MessageHandler.Main.tasks_comp,
        "tasks_comp_end": MessageHandler.Main.tasks_comp_end,
        "set_menu": MessageHandler.Settings.set_menu,
        "set_name": MessageHandler.Settings.set_name,
        "set_surname": MessageHandler.Settings.set_surname,
        "set_let_class": MessageHandler.Settings.set_let_class,
        "set_num_class": MessageHandler.Settings.set_num_class,
        "reg_menu": MessageHandler.Reg.reg_menu,
        "reg_name": MessageHandler.Reg.reg_name,
        "reg_surname": MessageHandler.Reg.reg_surname,
        "reg_let_class": MessageHandler.Reg.reg_let_class,
        "reg_num_class": MessageHandler.Reg.reg_num_class,
        "reg_id_team": MessageHandler.Reg.reg_team_id,
        "reg_team_menu": MessageHandler.Reg.Team.reg_team_menu,
        "reg_team_name": MessageHandler.Reg.Team.reg_team_name
    }
    if action.get(user["status"]):
        if not action[user["status"]](bot, message, user):
            bot.send_message(user["id"], "–ù–µ –ø–æ–Ω—è–ª!")
    else:
        bot.send_message(user["id"], f"–°—Ç–∞—Ç—É—Å {user['status']} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return

bot.polling()

import telebot
import config
import json
import time
import mysql.connector

from DB import DB as D
from threading import Thread
from telebot import types

bot = telebot.TeleBot(config.TOKEN)
DB = D(config.mysql)

bot.send_message(1294113685, "Start Bot")

def json_loads(data):
    try:
        return json.loads(data)
    except:
        return None

def get_user(message):
    data = DB.select('Users', ['id', 'name', 'surname', 'num_class', 'let_class', 'id_team', 'status'], [['id', '=', message.chat.id]], 1)
    if (data):
        return {"id": data[0][0], "name": data[0][1], "surname": data[0][2], "num_class": data[0][3], "let_class": data[0][4], "id_team":data[0][5], "status": data[0][6],}
    else:
        DB.insert('Users', ['id', 'name', 'surname', 'num_class', 'let_class', 'id_team', 'status'], [[message.chat.id, message.chat.first_name, "NaN", 5, '–ê', 0, 'reg_menu']])
        return {"id": message.chat.id, "name": message.chat.first_name, "num_class": 5, "let_class": '–ê', "id_team": 0, "status": 'reg_menu'}

def log(message, user):
    query = "INSERT INTO log (text) VALUES (%s)"

def user_update(user, status=None, settings=None):
    DB.update('Users', {'status': status}, [['id', '=', user['id']]])

def markups(buttons):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    b = []
    for i in buttons:
        b.append(types.KeyboardButton(i))
    markup.add(*b)
    return markup

def menu_markups(user):
    answer = markups(["–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—éüñ•Ô∏è", "–ò–Ω—Ñ–æ‚Ñπ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è"])

@bot.message_handler(commands=['start'])
def start_message(message):
    user = get_user(message)
    if(user["status"] != "reg"):
        bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –≤ CTF(Capture the flag)", reply_markup=menu_markups(user))
        log(message, user)
        user_update(user, "menu")
    else:
        bot.send_message(user["id"], "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:\n <b>1. –ï—Å–ª–∏ –≤—ã —É—á–∏—Ç–µ–ª—å</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–£—á–∏—Ç–µ–ª—å'. \n <b>2. –ï—Å–ª–∏ –≤—ã –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞, –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞, –≤ –º–µ–Ω—é ID –∫–æ–º–∞–Ω–¥—ã –≤–≤–µ–¥–∏—Ç–µ 0, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã, –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'. \n <b>2. –ï—Å–ª–∏ –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã(–Ω–µ –∫–∞–ø–∏—Ç–∞–Ω)</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞, –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞, –≤ –º–µ–Ω—é ID –∫–æ–º–∞–Ω–¥—ã –≤–≤–µ–¥–∏—Ç–µ, ID –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–≤–µ–ª–æ –∫–∞–ø–∏—Ç–∞–Ω—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã, –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'", parse_mode="HTML", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã'  '–ì–æ—Ç–æ–≤–æ']))

@bot.message_handler(commands=['restart'])
def start_message(message):
    user = get_user(message)
    bot.send_message(message.chat.id,"–ü–µ—Ä–µ–∑–∞—Ä—è–∂–∞—é!!!!!!!!!!", reply_markup=menu_markups(user))
    log(message, user)
    user_update(user, "menu")

class MessageHandler:
    class Main:
        def menu(bot, message, user):
            if "–ò–ù–§–û" in message.text.upper():
                bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ CTF, –ó–¥–µ—Å—å –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏") #–î–æ–±–∞–≤–∏—Ç—å –ª–∏–¥–µ—Ä –±–æ—Ä–¥
                return True

        
        def to_menu(bot, message, user):
            bot.send_message(user["id"], "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!", reply_markup=menu_markups(user))
            user_update(user, status="menu")
            return True
        
    class Reg:
        def reg_to_menu(bot, message, user):
            user_update(user, status="reg_menu")
            return True

        def reg_menu(bot, message, user):
            if(message.text.upper() == "–ò–ú–Ø"):
                user_update(user, status="reg_name")
                return MessageHandler.Reg.reg_name(bot, message, user)
            if(message.text.upper() == "–§–ê–ú–ò–õ–ò–Ø"):
                user_update(user, status="reg_surname")
                return MessageHandler.Reg.reg_surname(bot, message, user)
            if(message.text.upper() == "–ù–û–ú–ï–† –ö–õ–ê–°–°–ê"):
                user_update(user, status="reg_num_class")
                return MessageHandler.Reg.reg_num_class(bot, message, user)
            if(message.text.upper() == "–ë–£–ö–í–ê –ö–õ–ê–°–°–ê"):
                user_update(user, status="reg_let_class")
                return MessageHandler.Reg.reg_let_class(bot, message, user)
            if(message.text.upper() == "ID –ö–û–ú–ê–ù–î–´"):
                user_update(user, status="reg_id_team")
            
            return True

        def reg_name(bot, message, user):
            bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è", reply_markup=markups(['–ù–∞–∑–∞–¥']))
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                return MessageHandler.Reg.reg_to_menu
            elif(message.text.upper() != "–ò–ú–Ø" and message.text.upper() != "–ù–ê–ó–ê–î"):
                DB.update(user, {'name': message.text}, [['id', '=', user['id']]])
            
            return True
        def reg_surname(bot, message, user):
            bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é", reply_markup=markups(['–ù–∞–∑–∞–¥']))
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                return MessageHandler.Reg.reg_to_menu
            elif(message.text.upper() != "–§–ê–ú–ò–õ–ò–Ø" and message.text.upper() != "–ù–ê–ó–ê–î"):
                DB.update(user, {'surname': message.text}, [['id', '=', user['id']]])
            
            return True
        
        def reg_num_class(bot, message, user):
            bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞", reply_markup=markups(['–ù–∞–∑–∞–¥']))
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                return MessageHandler.Reg.reg_to_menu
            elif(message.text.upper() != "–ù–û–ú–ï–† –ö–õ–ê–°–°–ê" and message.text.upper() != "–ù–ê–ó–ê–î"):
                DB.update(user, {'num_class': message.text}, [['id', '=', user['id']]])
            return True
        
        def reg_let_class(bot, message, user):
            bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞", reply_markup=markups(['–ù–∞–∑–∞–¥']))
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                return MessageHandler.Reg.reg_to_menu
            elif(message.text.upper() != "–ë–£–ö–í–ê –ö–õ–ê–°–°–ê" and message.text.upper() != "–ù–ê–ó–ê–î"):
                DB.update(user, {'let_class': message.text}, [['id', '=', user['id']]])
            
            return True
        
        def reg_team_id(bot, message, user):
            bot.send_message(user["id"], "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤–≤–µ–¥–∏—Ç–µ 0", reply_markup=markups(['–ù–∞–∑–∞–¥']))
            if(message.text.upper() == "–ù–ê–ó–ê–î"):
                return MessageHandler.Reg.reg_to_menu(bot, message, user)
            elif(message.text.upper() == "0"):
                user_update(user, status="reg_team")
                return MessageHandler.Reg.reg_team(bot, message, user)
            elif(message.text.upper() != "–ë–£–ö–í–ê –ö–õ–ê–°–°–ê" and message.text.upper() != "–ù–ê–ó–ê–î"):
                data = DB.select('Teams', where= [['id', '=', int(message.text)]], limit=1)
                print(data)
                if(len(data) == 1):
                    DB.update(user, {'team_id': message.text}, [['id', '=', user['id']]])
                    bot.send_message(user["id"], "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ", reply_markup=markups(['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞', '–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞', 'ID –ö–æ–º–∞–Ω–¥—ã'  '–ì–æ—Ç–æ–≤–æ']))
                else:
                    bot.send_message(user["id"], "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True

        
        class Team:
            def reg_team(bot, message, user):
                bot.send_message(user["id"], "")
        


def update_connection():
    while True:
        try:
            del DB
            DB = DB(mysql)
            time.sleep(5)
        except:
            pass

thread1 = Thread(target=update_connection)
thread1.start()

@bot.message_handler(content_types=["text"])
def handle_text(message):
    print(f"{message.chat.id} {message.chat.first_name} |{message.text}|")
    message.text = message.text.strip().replace("  ", " ").replace("\t\t", "\t")
    user = get_user(message)
    log(message, user)
    action = {
        "menu": MessageHandler.Main.menu,
        "reg_menu": MessageHandler.Reg.reg_menu,
        "reg_name": MessageHandler.Reg.reg_name,
        "reg_surname": MessageHandler.Reg.reg_surname,
        "reg_let_class": MessageHandler.Reg.reg_let_class,
        "reg_num_class": MessageHandler.Reg.reg_num_class,
        "reg_id_team": MessageHandler.Reg.reg_team_id,
    }
    if action.get(user["status"]):
        if not action[user["status"]](bot, message, user):
            bot.send_message(user["id"], "–ù–µ –ø–æ–Ω—è–ª!")
    else:
        bot.send_message(user["id"], f"–°—Ç–∞—Ç—É—Å {user['status']} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return

bot.polling()